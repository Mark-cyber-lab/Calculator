/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javacalculato.newpackage;
import java.util.Stack;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Random;
import java.awt.Window;
import java.awt.Toolkit;
import java.awt.Dimension;

/**
 *
 * @author Mark Nelson
 */
public class CalculatorGUI extends javax.swing.JFrame{

    /**
     * Creates new form CalculatorGUI
     */
    public CalculatorGUI() {
        initComponents();
        this.setResizable(false);
        centerWindow(this);
    }
    
    Timer timerStarter;
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        basicCalculatorPanel = new javax.swing.JPanel();
        dot = new javax.swing.JButton();
        equals = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        one = new javax.swing.JButton();
        two = new javax.swing.JButton();
        three = new javax.swing.JButton();
        five = new javax.swing.JButton();
        add = new javax.swing.JButton();
        four = new javax.swing.JButton();
        six = new javax.swing.JButton();
        multiply = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        subtract = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        inputField = new javax.swing.JTextField();
        seven = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        openingParenthesis = new javax.swing.JButton();
        exponent = new javax.swing.JButton();
        closingParenthesis = new javax.swing.JButton();
        mode = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        modePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        game = new javax.swing.JButton();
        basciCalculator = new javax.swing.JButton();
        gameDifficulty = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        easy = new javax.swing.JButton();
        medium = new javax.swing.JButton();
        hard = new javax.swing.JButton();
        back = new javax.swing.JButton();
        gamePanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        problem = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        userAnswer = new javax.swing.JTextField();
        submitPlayerAnswer = new javax.swing.JButton();
        backToMode = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        scoreViewing = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        score = new javax.swing.JLabel();
        playAgain = new javax.swing.JButton();
        returnToMode = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        answerToTheProblem = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(0, 0, 0));
        getContentPane().setLayout(new java.awt.CardLayout());

        basicCalculatorPanel.setBackground(new java.awt.Color(0, 0, 0));

        dot.setBackground(new java.awt.Color(0, 0, 0));
        dot.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        dot.setForeground(new java.awt.Color(255, 255, 255));
        dot.setText(".");
        dot.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        dot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dotActionPerformed(evt);
            }
        });

        equals.setBackground(new java.awt.Color(0, 102, 204));
        equals.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        equals.setForeground(new java.awt.Color(255, 255, 255));
        equals.setText("=");
        equals.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsActionPerformed(evt);
            }
        });

        zero.setBackground(new java.awt.Color(0, 0, 0));
        zero.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        zero.setForeground(new java.awt.Color(255, 255, 255));
        zero.setText("0");
        zero.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroActionPerformed(evt);
            }
        });

        one.setBackground(new java.awt.Color(0, 0, 0));
        one.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        one.setForeground(new java.awt.Color(255, 255, 255));
        one.setText("1");
        one.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneActionPerformed(evt);
            }
        });

        two.setBackground(new java.awt.Color(0, 0, 0));
        two.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        two.setForeground(new java.awt.Color(255, 255, 255));
        two.setText("2");
        two.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoActionPerformed(evt);
            }
        });

        three.setBackground(new java.awt.Color(0, 0, 0));
        three.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        three.setForeground(new java.awt.Color(255, 255, 255));
        three.setText("3");
        three.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeActionPerformed(evt);
            }
        });

        five.setBackground(new java.awt.Color(0, 0, 0));
        five.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        five.setForeground(new java.awt.Color(255, 255, 255));
        five.setText("5");
        five.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveActionPerformed(evt);
            }
        });

        add.setBackground(new java.awt.Color(51, 51, 51));
        add.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        add.setForeground(new java.awt.Color(51, 102, 255));
        add.setText("+");
        add.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        four.setBackground(new java.awt.Color(0, 0, 0));
        four.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        four.setForeground(new java.awt.Color(255, 255, 255));
        four.setText("4");
        four.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourActionPerformed(evt);
            }
        });

        six.setBackground(new java.awt.Color(0, 0, 0));
        six.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        six.setForeground(new java.awt.Color(255, 255, 255));
        six.setText("6");
        six.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });

        multiply.setBackground(new java.awt.Color(51, 51, 51));
        multiply.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        multiply.setForeground(new java.awt.Color(51, 102, 255));
        multiply.setText("*");
        multiply.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplyActionPerformed(evt);
            }
        });

        clear.setBackground(new java.awt.Color(153, 0, 0));
        clear.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        clear.setForeground(new java.awt.Color(255, 255, 255));
        clear.setText("C");
        clear.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        subtract.setBackground(new java.awt.Color(51, 51, 51));
        subtract.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        subtract.setForeground(new java.awt.Color(51, 102, 255));
        subtract.setText("-");
        subtract.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        subtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtractActionPerformed(evt);
            }
        });

        divide.setBackground(new java.awt.Color(51, 51, 51));
        divide.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        divide.setForeground(new java.awt.Color(51, 102, 255));
        divide.setText("/");
        divide.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideActionPerformed(evt);
            }
        });

        inputField.setBackground(new java.awt.Color(51, 51, 51));
        inputField.setFont(new java.awt.Font("Segoe UI", 0, 30)); // NOI18N
        inputField.setForeground(new java.awt.Color(255, 255, 255));
        inputField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        seven.setBackground(new java.awt.Color(0, 0, 0));
        seven.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        seven.setForeground(new java.awt.Color(255, 255, 255));
        seven.setText("7");
        seven.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });

        eight.setBackground(new java.awt.Color(0, 0, 0));
        eight.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        eight.setForeground(new java.awt.Color(255, 255, 255));
        eight.setText("8");
        eight.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightActionPerformed(evt);
            }
        });

        nine.setBackground(new java.awt.Color(0, 0, 0));
        nine.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        nine.setForeground(new java.awt.Color(255, 255, 255));
        nine.setText("9");
        nine.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(0, 153, 0));
        delete.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("<-");
        delete.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        openingParenthesis.setBackground(new java.awt.Color(0, 0, 0));
        openingParenthesis.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        openingParenthesis.setForeground(new java.awt.Color(255, 255, 255));
        openingParenthesis.setText("(");
        openingParenthesis.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        openingParenthesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openingParenthesisActionPerformed(evt);
            }
        });

        exponent.setBackground(new java.awt.Color(0, 0, 0));
        exponent.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        exponent.setForeground(new java.awt.Color(255, 255, 255));
        exponent.setText("^");
        exponent.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        exponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exponentActionPerformed(evt);
            }
        });

        closingParenthesis.setBackground(new java.awt.Color(0, 0, 0));
        closingParenthesis.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        closingParenthesis.setForeground(new java.awt.Color(255, 255, 255));
        closingParenthesis.setText(")");
        closingParenthesis.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        closingParenthesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closingParenthesisActionPerformed(evt);
            }
        });

        mode.setBackground(new java.awt.Color(0, 0, 0));
        mode.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        mode.setForeground(new java.awt.Color(255, 255, 255));
        mode.setText("Mode");
        mode.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        mode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Calculator");

        javax.swing.GroupLayout basicCalculatorPanelLayout = new javax.swing.GroupLayout(basicCalculatorPanel);
        basicCalculatorPanel.setLayout(basicCalculatorPanelLayout);
        basicCalculatorPanelLayout.setHorizontalGroup(
            basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicCalculatorPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(basicCalculatorPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(basicCalculatorPanelLayout.createSequentialGroup()
                        .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(one, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(four, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(seven, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(exponent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eight, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                            .addComponent(five, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(two, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(basicCalculatorPanelLayout.createSequentialGroup()
                                .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(three, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(basicCalculatorPanelLayout.createSequentialGroup()
                                        .addComponent(dot, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(equals, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(basicCalculatorPanelLayout.createSequentialGroup()
                                .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(six, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(16, 16, 16))
                    .addGroup(basicCalculatorPanelLayout.createSequentialGroup()
                        .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(basicCalculatorPanelLayout.createSequentialGroup()
                                .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mode, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(divide, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                    .addComponent(openingParenthesis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(multiply, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                    .addComponent(closingParenthesis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subtract, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 16, Short.MAX_VALUE))))
        );
        basicCalculatorPanelLayout.setVerticalGroup(
            basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, basicCalculatorPanelLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openingParenthesis, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closingParenthesis, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mode, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(divide, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subtract, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(basicCalculatorPanelLayout.createSequentialGroup()
                        .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(basicCalculatorPanelLayout.createSequentialGroup()
                        .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(basicCalculatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dot, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exponent, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(equals, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(19, 19, 19))
        );

        getContentPane().add(basicCalculatorPanel, "card2");

        modePanel.setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MODE");

        game.setBackground(new java.awt.Color(0, 0, 0));
        game.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        game.setForeground(new java.awt.Color(255, 255, 255));
        game.setText("Solve Math Game");
        game.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameActionPerformed(evt);
            }
        });

        basciCalculator.setBackground(new java.awt.Color(0, 0, 0));
        basciCalculator.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        basciCalculator.setForeground(new java.awt.Color(255, 255, 255));
        basciCalculator.setText("Basic Calculator");
        basciCalculator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basciCalculatorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout modePanelLayout = new javax.swing.GroupLayout(modePanel);
        modePanel.setLayout(modePanelLayout);
        modePanelLayout.setHorizontalGroup(
            modePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modePanelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(modePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(game, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(basciCalculator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        modePanelLayout.setVerticalGroup(
            modePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modePanelLayout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94)
                .addComponent(game, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(basciCalculator, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(243, Short.MAX_VALUE))
        );

        getContentPane().add(modePanel, "card3");

        gameDifficulty.setBackground(new java.awt.Color(0, 0, 0));

        jLabel2.setFont(new java.awt.Font("Stencil", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Solve Math Game");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Difficulty");

        easy.setBackground(new java.awt.Color(0, 102, 0));
        easy.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        easy.setForeground(new java.awt.Color(255, 255, 255));
        easy.setText("Easy");
        easy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                easyActionPerformed(evt);
            }
        });

        medium.setBackground(new java.awt.Color(0, 0, 153));
        medium.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        medium.setForeground(new java.awt.Color(255, 255, 255));
        medium.setText("Medium");
        medium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediumActionPerformed(evt);
            }
        });

        hard.setBackground(new java.awt.Color(204, 0, 0));
        hard.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        hard.setText("Hard");
        hard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hardActionPerformed(evt);
            }
        });

        back.setBackground(new java.awt.Color(204, 204, 204));
        back.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        back.setForeground(new java.awt.Color(0, 0, 0));
        back.setText("Return");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gameDifficultyLayout = new javax.swing.GroupLayout(gameDifficulty);
        gameDifficulty.setLayout(gameDifficultyLayout);
        gameDifficultyLayout.setHorizontalGroup(
            gameDifficultyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameDifficultyLayout.createSequentialGroup()
                .addGroup(gameDifficultyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gameDifficultyLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(gameDifficultyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(easy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(medium, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(gameDifficultyLayout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(back)))
                .addContainerGap(64, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gameDifficultyLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(131, 131, 131))
        );
        gameDifficultyLayout.setVerticalGroup(
            gameDifficultyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameDifficultyLayout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(29, 29, 29)
                .addComponent(easy, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(medium, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(hard, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(back)
                .addGap(119, 119, 119))
        );

        getContentPane().add(gameDifficulty, "card4");

        gamePanel.setBackground(new java.awt.Color(0, 0, 0));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Problem");

        problem.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        problem.setForeground(new java.awt.Color(255, 255, 255));
        problem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        problem.setText("Hello World");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Enter Answer:");

        userAnswer.setBackground(new java.awt.Color(255, 255, 255));
        userAnswer.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        userAnswer.setForeground(new java.awt.Color(0, 0, 0));
        userAnswer.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        userAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userAnswerActionPerformed(evt);
            }
        });

        submitPlayerAnswer.setBackground(new java.awt.Color(0, 204, 0));
        submitPlayerAnswer.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        submitPlayerAnswer.setForeground(new java.awt.Color(255, 255, 255));
        submitPlayerAnswer.setText("Submit");
        submitPlayerAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitPlayerAnswerActionPerformed(evt);
            }
        });

        backToMode.setBackground(new java.awt.Color(0, 0, 0));
        backToMode.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        backToMode.setForeground(new java.awt.Color(255, 255, 255));
        backToMode.setText("Back");
        backToMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToModeActionPerformed(evt);
            }
        });

        jLabel10.setBackground(new java.awt.Color(0, 0, 0));
        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(backToMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(submitPlayerAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(99, 99, 99))
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(problem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(userAnswer, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())))
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(problem, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(submitPlayerAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(backToMode, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        getContentPane().add(gamePanel, "card5");

        scoreViewing.setBackground(new java.awt.Color(0, 0, 0));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("You Lose!");

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Score:");

        score.setBackground(new java.awt.Color(0, 0, 0));
        score.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        score.setForeground(new java.awt.Color(255, 255, 255));
        score.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        score.setText("...");

        playAgain.setBackground(new java.awt.Color(0, 255, 0));
        playAgain.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        playAgain.setForeground(new java.awt.Color(255, 255, 255));
        playAgain.setText("Play Again");
        playAgain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playAgainActionPerformed(evt);
            }
        });

        returnToMode.setBackground(new java.awt.Color(0, 51, 255));
        returnToMode.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        returnToMode.setForeground(new java.awt.Color(255, 255, 255));
        returnToMode.setText("Return");
        returnToMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToModeActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("The answer:");

        answerToTheProblem.setBackground(new java.awt.Color(0, 0, 0));
        answerToTheProblem.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        answerToTheProblem.setForeground(new java.awt.Color(255, 255, 255));
        answerToTheProblem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        answerToTheProblem.setText("The answer:");

        javax.swing.GroupLayout scoreViewingLayout = new javax.swing.GroupLayout(scoreViewing);
        scoreViewing.setLayout(scoreViewingLayout);
        scoreViewingLayout.setHorizontalGroup(
            scoreViewingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scoreViewingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scoreViewingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scoreViewingLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(scoreViewingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(returnToMode, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playAgain, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scoreViewingLayout.createSequentialGroup()
                        .addGroup(scoreViewingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(score, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
            .addComponent(answerToTheProblem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        scoreViewingLayout.setVerticalGroup(
            scoreViewingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scoreViewingLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(answerToTheProblem, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(score, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(playAgain, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(returnToMode, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        getContentPane().add(scoreViewing, "card6");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int scoreCount = 0;
    private int appender = 0;
    private String calculatedResult = "";
    private int numberOfOperators = 0;
    private StringBuilder addOns = new StringBuilder();
    String result = "";
    
    private void closingParenthesisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closingParenthesisActionPerformed
        isOperator(inputField.getText(), closingParenthesis.getText());
    }//GEN-LAST:event_closingParenthesisActionPerformed

    private void exponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exponentActionPerformed
        if(!inputField.getText().isEmpty())
        isOperator(inputField.getText(), exponent.getText());
    }//GEN-LAST:event_exponentActionPerformed

    private void openingParenthesisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openingParenthesisActionPerformed
        inputField.setText(inputField.getText() + openingParenthesis.getText());
    }//GEN-LAST:event_openingParenthesisActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        String text = inputField.getText();
        if(!text.isEmpty())
        inputField.setText(text.substring(0, text.length() - 1));
    }//GEN-LAST:event_deleteActionPerformed

    private void nineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineActionPerformed
        inputField.setText(inputField.getText() + nine.getText());
    }//GEN-LAST:event_nineActionPerformed

    private void eightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightActionPerformed
        inputField.setText(inputField.getText() + eight.getText());
    }//GEN-LAST:event_eightActionPerformed

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenActionPerformed
        inputField.setText(inputField.getText() + seven.getText());
    }//GEN-LAST:event_sevenActionPerformed

    private void divideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideActionPerformed
        isOperator(inputField.getText(), divide.getText());
    }//GEN-LAST:event_divideActionPerformed

    private void subtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtractActionPerformed
        inputField.setText(inputField.getText() + subtract.getText());
    }//GEN-LAST:event_subtractActionPerformed

    //----------------------------------------------------Buttons---------------------------------------------------------
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        inputField.setText("");
    }//GEN-LAST:event_clearActionPerformed

    private void multiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplyActionPerformed
        isOperator(inputField.getText(), multiply.getText());
    }//GEN-LAST:event_multiplyActionPerformed

    private void sixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixActionPerformed
        inputField.setText(inputField.getText() + six.getText());
    }//GEN-LAST:event_sixActionPerformed

    private void fourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourActionPerformed
        inputField.setText(inputField.getText() + four.getText());
    }//GEN-LAST:event_fourActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        isOperator(inputField.getText(), add.getText());
    }//GEN-LAST:event_addActionPerformed

    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveActionPerformed
        inputField.setText(inputField.getText() + five.getText());
    }//GEN-LAST:event_fiveActionPerformed

    private void threeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeActionPerformed
        inputField.setText(inputField.getText() + three.getText());
    }//GEN-LAST:event_threeActionPerformed

    private void twoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoActionPerformed
        inputField.setText(inputField.getText() + two.getText());
    }//GEN-LAST:event_twoActionPerformed

    private void oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneActionPerformed
        inputField.setText(inputField.getText() + one.getText());
    }//GEN-LAST:event_oneActionPerformed

    private void zeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroActionPerformed
        inputField.setText(inputField.getText() + zero.getText());
    }//GEN-LAST:event_zeroActionPerformed

    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsActionPerformed

        String expression = inputField.getText();
        
        if(check(expression.toCharArray())){
            if(expression.equals(result))
                expression += addOns;
            else
                extractSomething(expression.toCharArray());
            result = calculate(expression);
        }
        else
            result = "Error!";
        inputField.setText(result);
    }//GEN-LAST:event_equalsActionPerformed

    private void extractSomething(char[] expression){
        addOns.setLength(0);
        int operatorPosition = 0;
        char prev = '-';
        
        //this checks for the operator available
        for(int i = 0; i < expression.length; ++i){
            if(isAnOperator(expression[i]) && (!isAnOperator(prev)) && precedence(expression[i]) <= precedence(expression[operatorPosition])){
                operatorPosition = i;
            }
            prev = expression[i];
        }
        
        for(int i = operatorPosition; i < expression.length; ++i)
            addOns.append(expression[i]);
        
    }
    
    private void dotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dotActionPerformed
        inputField.setText(inputField.getText() + dot.getText());
    }//GEN-LAST:event_dotActionPerformed

    private void modeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeActionPerformed
        basicCalculatorPanel.setVisible(false);
        modePanel.setVisible(true);
    }//GEN-LAST:event_modeActionPerformed

    private void gameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameActionPerformed
        modePanel.setVisible(false);
        gameDifficulty.setVisible(true);
    }//GEN-LAST:event_gameActionPerformed

    private void basciCalculatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basciCalculatorActionPerformed
        modePanel.setVisible(false);
        basicCalculatorPanel.setVisible(true);
    }//GEN-LAST:event_basciCalculatorActionPerformed

    private void backToModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToModeActionPerformed
        gamePanel.setVisible(false);
        stop();
        gameDifficulty.setVisible(true);
    }//GEN-LAST:event_backToModeActionPerformed

    private void submitPlayerAnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitPlayerAnswerActionPerformed
        stop();       
        if(userAnswer.getText().equals(calculatedResult)){
            scoreCount += appender;
            userAnswer.setText("");
            try{
                Thread.sleep(1000);
            }catch(InterruptedException e){
            }
            timeLimit();
        }
        else{
            gameOver();
        }
        
    }//GEN-LAST:event_submitPlayerAnswerActionPerformed

    private void playAgainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playAgainActionPerformed
        scoreViewing.setVisible(false);
        gameDifficulty.setVisible(true);
        scoreCount = 0;
    }//GEN-LAST:event_playAgainActionPerformed

    private void returnToModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnToModeActionPerformed
        scoreViewing.setVisible(false);
        modePanel.setVisible(true);
    }//GEN-LAST:event_returnToModeActionPerformed

    private void easyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_easyActionPerformed
        gameDifficulty.setVisible(false);
        gamePanel.setVisible(true);
        appender = 1;
        numberOfOperators = 1;
        timeLimit(); 
    }//GEN-LAST:event_easyActionPerformed

    private void mediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediumActionPerformed
        gameDifficulty.setVisible(false);
        gamePanel.setVisible(true);
        appender = 3;
        numberOfOperators = 2;
        timeLimit();
    }//GEN-LAST:event_mediumActionPerformed

    private void hardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hardActionPerformed
        gameDifficulty.setVisible(false);
        gamePanel.setVisible(true);
        appender = 5;
        numberOfOperators = 3;
        timeLimit();
    }//GEN-LAST:event_hardActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        gameDifficulty.setVisible(false);
        modePanel.setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    private void userAnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userAnswerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userAnswerActionPerformed

    //----------------------------------for creating an expression---------------------------------
    private String createExpression(){
        //declarations for the randomizer and the string holder
        StringBuilder text = new StringBuilder();
        Random random = new Random();
        String result = "";

        do{
            //int n = random.nextInt(5) + 1;  //create for the number of operators
            //
            
            for (int i = 0; i < numberOfOperators; ++i) {   //creates random numbers for the operand and operator
                text.append(random.nextInt(-50, 50) + 1);
                text.append(createOperator(random.nextInt(5) + 1));
            }
            text.append(random.nextInt(-100, 100) + 1); //creates for the last operand

            result = "" + text; //converts to string

            calculatedResult = calculate(result); //calculate the whole expression
            if(result.equals("Cannot divide by zero!")) //checks if the answer is valid
                text.setLength(0);  //if not, then it will create another expression again
        }while(result.equals("Cannot divide by zero!"));
        return result;  //returns result if it is valid
    }

    private char createOperator(int number){ //for creating an operator
        return switch (number){
            case 1 -> '+';
            case 2 -> '-';
            case 3 -> '*';
            case 4 -> '/';
            default -> '^';
        };
    }
    
    //-----------------------------timer stoper-------------------------------
    private void stop(){
        if(timerStarter != null){
            timerStarter.cancel();
            timerStarter = null;
        }
    }
    
    //--------------------------this will start the timer-----------------------------------
    private void timeLimit(){
        problem.setText(createExpression());
        if(timerStarter == null){
            timerStarter = new Timer();
            TimerTask task = new TimerTask(){
            int counter = 60;
                @Override
                public void run() {
                    if(counter >= 0){
                        jLabel10.setText("" + counter);
                        --counter;
                    }
                    else{
                        stop();
                        gameOver();
                    }
                }
            };
            timerStarter.schedule(task, 0, 1000);
        }
        
    }
    private void gameOver(){
        gamePanel.setVisible(false);
        scoreViewing.setVisible(true);
        answerToTheProblem.setText(calculatedResult);
        score.setText("" + scoreCount);
        userAnswer.setText("");
    }
    
    //-----------------------checks the program if the input is correct-------------------------
    private boolean check(char[] expression){
        for(char c : expression){
            if(!Character.isDigit(c) && !isAnOperator(c) && c != ')' && c != '.')
                return false;
        }
        if(!backtrack(expression))
            return false;
        return true;
    }
    
    //----------------------determine if the user has entered a correct parenthesis paring--------------------------
    private boolean backtrack(char[] expression){
        int parenthesis = 0;
        for(char c : expression){
            if(c == '(')
                ++parenthesis;
            else if(c == ')')
                --parenthesis;
            if(parenthesis < 0)
                return false;
        }
        if(parenthesis != 0)
            return false;
        return true;
    }
    
    //---------------------------determines if a character is an operator------------------------------
     private static boolean isAnOperator(char prev){
        return prev == '+' || prev == '/' || prev == '*' || prev == '^' || prev == '(' || prev == '-';
    }

    private static final ArrayList<String> rpn = new ArrayList<>();

    //-----------------------for evaluating the rpn---------------------------------------
    private static String evaluateRPN(){
        Stack<Double> stack = new Stack<>();

        for(String c : rpn){
            if(c.length() == 1 && isAnOperator(c.charAt(0))){
                if(c.equals("/") && stack.peek() == 0.000000000000000000000000000000000000000)
                   return "Cannot divide by zero!";
                else{
                    double operand2 = stack.pop();
                    double operand1 = stack.pop();
                    stack.push(performCalculation(operand1, operand2, c.charAt(0)));
                }
                    
            }
            else
                stack.push(Double.parseDouble(c));

        }
        rpn.clear();
        double result = stack.pop();
        
        return "" + Math.round(result);
    }
    

    //--------------------------this will calculate the operations based on the character operator-------------------------
    private static double performCalculation(double operand1, double operand2, char operator){
        switch (operator){
            case '+' -> {
                return operand1 + operand2;
            }
            case '-' -> {
                return operand1 - operand2;
            }
            case '*' -> {
                return operand1 * operand2;
            }
            case '/' -> {
                return operand1 / operand2;
            }
            default -> {
                double valueOfOperand1 = operand1;

                if(operand2 >= 0){
                    for(int i = 0; i < operand2 - 1; ++i){
                        operand1 *= valueOfOperand1;
                    }
                }
                else{
                    for(int i = 0; i > operand2 + 1; --i){
                        operand1 *= valueOfOperand1;
                    }
                    operand1 = 1 / operand1;
                }
                return operand1;
            }
        }
    }

    //----------------------for converting expression to rpn-------------------------------\

    private static void convertToRPN(String expression){
        Stack<Character> stack = new Stack<>(); //                   for the operator stack

        //------------------for the rpn and the holder of a number---------------------
        StringBuilder holder = new StringBuilder();
        char prev = '+';

        for (char c : expression.toCharArray()) {
            if (Character.isDigit(c) || c == '.') {
                holder.append(c);
                if(prev == ')')
                    stack.push('*');
            } else if (c == '-' && isAnOperator(prev))
                holder.append(c);
            else {
                if(!holder.isEmpty()){
                    rpn.add(holder.toString());
                    holder.setLength(0);
                }

                if (c == '(') {
                    if(Character.isDigit(prev))
                        stack.push('*');
                    stack.push(c);
                }
                else if (c == ')') {
                    if(!stack.isEmpty()){
                        while (!stack.isEmpty() && stack.peek() != '(')
                            rpn.add("" + stack.pop());
                    }
                    stack.pop();
                } else {
                    if(!stack.isEmpty()){
                        while (!stack.isEmpty() && precedence(c) <= precedence(stack.peek())  && stack.peek() != '(')
                            rpn.add("" + stack.pop());
                    }
                    stack.push(c);
                }
            }
            prev = c;
        }
        if(!holder.isEmpty())
            rpn.add(holder.toString());
        //drains the contents of the stack
        while(!stack.isEmpty()){
            rpn.add("" + stack.pop());
        }
    }

    //-----------------------for determining the precedence of the operators-------------------------------
    private static int precedence(char letter){
        return switch (letter) {
            case '+', '-' -> 1;
            case '*', '/' -> 2;
            default -> 3;
        };
    }

    //---------------------------------this is the gear of all the function-------------------------
    private static String calculate(String expression){
        convertToRPN(expression);
        return evaluateRPN();
    }
    
    //-----------------------------------this is for checking if the user input is valid--------------------------------
    private void isOperator(String text, String operator){
        if(!text.isEmpty()){
            char letter = text.charAt(text.length() - 1);
            if((letter == '+' || letter == '-' || letter == '/' || letter == '*' || letter == '^')){
                inputField.setText(text.substring(0, text.length() - 1));
                inputField.setText(inputField.getText() + operator);
                return;
            }
            else if(letter == '(')
                return;
            else if(operator == ")" && (letter < '0' || letter > '9'))
                return;
        }    
        inputField.setText(text + operator);
    }
    
    private void centerWindow(Window w) {
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension d = tk.getScreenSize();
        setLocation((d.width-w.getWidth())/2,
                (d.height-w.getHeight())/2);
    }
    
    //---------------------------------main method-------------------------------------------------
    /** 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculatorGUI().setVisible(true);
            }
        });
    }

    //-------------------------------------------Declarations------------------------------------------------
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JLabel answerToTheProblem;
    private javax.swing.JButton back;
    private javax.swing.JButton backToMode;
    private javax.swing.JButton basciCalculator;
    private javax.swing.JPanel basicCalculatorPanel;
    private javax.swing.JButton clear;
    private javax.swing.JButton closingParenthesis;
    private javax.swing.JButton delete;
    private javax.swing.JButton divide;
    private javax.swing.JButton dot;
    private javax.swing.JButton easy;
    private javax.swing.JButton eight;
    private javax.swing.JButton equals;
    private javax.swing.JButton exponent;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JButton game;
    private javax.swing.JPanel gameDifficulty;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JButton hard;
    private javax.swing.JTextField inputField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton medium;
    private javax.swing.JButton mode;
    private javax.swing.JPanel modePanel;
    private javax.swing.JButton multiply;
    private javax.swing.JButton nine;
    private javax.swing.JButton one;
    private javax.swing.JButton openingParenthesis;
    private javax.swing.JButton playAgain;
    private javax.swing.JLabel problem;
    private javax.swing.JButton returnToMode;
    private javax.swing.JLabel score;
    private javax.swing.JPanel scoreViewing;
    private javax.swing.JButton seven;
    private javax.swing.JButton six;
    private javax.swing.JButton submitPlayerAnswer;
    private javax.swing.JButton subtract;
    private javax.swing.JButton three;
    private javax.swing.JButton two;
    private javax.swing.JTextField userAnswer;
    private javax.swing.JButton zero;
    // End of variables declaration//GEN-END:variables

}
